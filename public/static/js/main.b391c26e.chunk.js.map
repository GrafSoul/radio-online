{"version":3,"sources":["app/App.module.scss","app/App.js","serviceWorker.js","index.js"],"names":["module","exports","mainWindow","window","require","remote","getCurrentWindow","ipcRenderer","App","useState","status","setStatus","title","setTitle","url","setUrl","isLoading","setLoading","topbar","setTopbar","document","querySelector","webview","setWebview","useEffect","on","event","length","top","classes","webviewContainer","up","className","layout","topbarWrap","onMouseEnter","onMouseLeave","btnWindow","onClick","goBack","goForward","stop","reload","minimize","unmaximize","maximize","closeWindow","close","content","src","join","Boolean","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"sFACAA,EAAOC,QAAU,CAAC,OAAS,oBAAoB,WAAa,wBAAwB,OAAS,oBAAoB,iBAAmB,8BAA8B,GAAK,gBAAgB,MAAQ,mBAAmB,UAAY,uBAAuB,YAAc,2B,iKCG7PC,EADaC,OAAOC,QAAQ,YAA1BC,OACkBC,mBAEpBC,EADWJ,OAAOC,QAAQ,YACFG,YA8FfC,EA5FH,WAAO,IAAD,EACWC,oBAAS,GADpB,mBACVC,EADU,KACFC,EADE,OAESF,mBAAS,kBAFlB,mBAEVG,EAFU,KAEHC,EAFG,OAGQJ,mBAAS,sBAHjB,mBAGPK,EAHO,KAGFC,EAHE,OAIkBN,oBAAS,GAJ3B,mBAIPO,EAJO,KAIIC,EAJJ,OAKcR,oBAAS,GALvB,mBAKPS,EALO,KAKCC,EALD,OAMgBV,mBAASW,SAASC,cAAc,YANhD,mBAMPC,EANO,KAMEC,EANF,KAQdC,qBAAU,WACND,EAAWH,SAASC,cAAc,YAClCd,EAAYkB,GAAG,WAAW,SAACC,EAAOd,EAAOE,GAClB,IAAfA,EAAIa,SACJZ,EAAOD,GACPD,EAASD,SAGlB,IAEH,IA6CMgB,EAAM,CAACC,IAAQC,iBAAkBZ,EAASW,IAAQE,GAAK,IAE7D,OACI,yBAAKC,UAAWH,IAAQI,QACpB,yBAAKD,UAAWH,IAAQK,YACpB,yBAAKF,UAAWH,IAAQX,OAAQiB,aAbrB,WACpBhB,GAAU,IAY6DiB,aATjD,WACtBjB,GAAU,KAUG,6BACI,4BAAQa,UAAWH,IAAQQ,UAAWC,QArDrC,WACjBhB,EAAQiB,WAoDqE,uBAAGP,UAAU,gCAC1E,4BAAQA,UAAWH,IAAQQ,UAAWC,QAlDlC,WACpBhB,EAAQkB,cAiDwE,uBAAGR,UAAU,iCAC7E,4BAAQA,UAAWH,IAAQQ,UAAWC,QA/CrC,WACbtB,GACIM,EAAQmB,OACRxB,GAAW,KAEXK,EAAQoB,SACRzB,GAAW,MAyC0D,uBAAGe,UAAU,kBAE9E,yBAAKA,UAAWH,IAAQjB,OAAQA,EAAhC,MAAyC,8BAAOE,IAChD,6BACI,4BAAQkB,UAAWH,IAAQQ,UAAWC,QAzC7B,WACzBpC,EAAWyC,aAwC0E,uBAAGX,UAAU,4BAClF,4BAAQA,UAAWH,IAAQQ,UAAWC,QAtC7B,WAErB5B,GACAR,EAAW0C,aACXjC,GAAWD,KAEXR,EAAW2C,WACXlC,GAAWD,MA+BsE,uBAAGsB,UAAU,4BAClF,4BAAQA,UAAWH,IAAQQ,UAAY,IAAMR,IAAQiB,YAAaR,QA5B5D,WACtBpC,EAAW6C,UA2BmG,uBAAGf,UAAU,4BAKvH,0BAAMA,UAAWH,IAAQmB,SACrB,6BAASC,IAAKnC,EACdkB,UAAWJ,EAAIsB,KAAK,UClFhBC,QACW,cAA7BhD,OAAOiD,SAASC,UAEe,UAA7BlD,OAAOiD,SAASC,UAEhBlD,OAAOiD,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASpC,SAASqC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.b391c26e.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"layout\":\"App_layout__2ipSF\",\"topbarWrap\":\"App_topbarWrap__3O2Qt\",\"topbar\":\"App_topbar__1f6qo\",\"webviewContainer\":\"App_webviewContainer__3IIuv\",\"up\":\"App_up__nWsJn\",\"title\":\"App_title__kcHbB\",\"btnWindow\":\"App_btnWindow__3ldLA\",\"closeWindow\":\"App_closeWindow__1Rxqs\"};","import React, { useState, useEffect } from 'react';\nimport classes from  './App.module.scss';\n\nconst { remote } = window.require('electron');\nconst mainWindow = remote.getCurrentWindow();\nconst electron = window.require('electron');\nconst ipcRenderer  = electron.ipcRenderer;\n\nconst App = () => {   \n\tconst [status, setStatus] = useState(false)\n\tconst [title, setTitle] = useState('Wrapps Browser')\n    const [url, setUrl] = useState('https://google.com')\n    const [isLoading, setLoading] = useState(false)\n    const [topbar, setTopbar] = useState(false)\n    const [webview, setWebview] = useState(document.querySelector('webview'));\n\n    useEffect(() => {\n        setWebview(document.querySelector('webview'));\t\t\n        ipcRenderer.on('urlOpen', (event, title, url) => {\n            if (url.length !== 0) {\n                setUrl(url);\n                setTitle(title);\n            }    \n        })\n    }, []);\n\n    const handleGoBack = () => {\n        webview.goBack();\n    };\n\n    const handleGoForward = () => { \n        webview.goForward();\n    }\n\n    const handleReload = () => {\n        if (isLoading) {\n                webview.stop();\n                setLoading(false)\n        } else {\n                webview.reload();\n                setLoading(true)\n        }\n    };\n\n    const handleMinimizeWindow = () => {\n        mainWindow.minimize();\n    };\n\n    const handleMaximizeWindow = () => {\n\n        if (status) {\n            mainWindow.unmaximize();\n            setStatus(!status);\n        } else { \n            mainWindow.maximize();\n            setStatus(!status);\n        }\t\t\n    };\n\n    const handleCloseWindow = () => {\n        mainWindow.close();\n    };\n\n    const handleTopbarUp = () => {      \n       setTopbar(true)\n    };\n\n    const handleTopbarDown = () => {    \n       setTopbar(false)\n    };\n\n    const top = [classes.webviewContainer, topbar ? classes.up : ''];\n\n    return (\n        <div className={classes.layout}>\n            <div className={classes.topbarWrap}>\n                <div className={classes.topbar} onMouseEnter={handleTopbarUp} onMouseLeave={handleTopbarDown}>\n                    \n                    <div>\n                        <button className={classes.btnWindow} onClick={handleGoBack}><i className=\"fal fa-chevron-circle-left\" /></button> \n                        <button className={classes.btnWindow} onClick={handleGoForward}><i className=\"fal fa-chevron-circle-right\"/></button>\n                        <button className={classes.btnWindow} onClick={handleReload}><i className=\"fal fa-sync\"/></button>\n                    </div>\n                    <div className={classes.title}>{title} - <span>{url}</span></div>\n                    <div>\n                        <button className={classes.btnWindow} onClick={handleMinimizeWindow}><i className=\"fal fa-window-minimize\" /></button> \n                        <button className={classes.btnWindow} onClick={handleMaximizeWindow}><i className=\"fal fa-window-maximize\" /></button>\n                        <button className={classes.btnWindow + \" \" + classes.closeWindow} onClick={handleCloseWindow}><i className=\"fal fa-window-close\" /></button>\n                    </div>\n                </div>\t\t\t\t\t\n            </div>\n        \n            <main className={classes.content}>\n                <webview src={url}\n                className={top.join(' ')}></webview>    \n            </main>\n        </div>\n    );  \n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.module.scss';\nimport App from './app/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}